{"version":3,"sources":["../../lib/generic/GenericValidator.es6"],"names":["protectedInstance","GenericValidator","schemaValidator","payload","schema","validate","errors","getGenericValidatorInstance","args","module","exports"],"mappings":";;;;;;AAAA,IAAIA,0BAAJ;;AAEA;;;;IAGMC,gB;AAEJ,kCAA+B;AAAA,QAAlBC,eAAkB,QAAlBA,eAAkB;;AAAA;;AAE7B;AACAD,qBAAiBC,eAAjB,GAAmCA,eAAnC;AACD;;AAED;;;;;;;;;;qCAMiBC,O,EAASC,M,EAAQ;;AAEhC,UAAIC,WAAWJ,iBAAiBC,eAAjB,CAAiCE,MAAjC,CAAf;;AAEA,UAAIC,SAASF,OAAT,CAAJ,EAAuB;AACrB,eAAO,IAAP;AACD;AACD,YAAME,SAASC,MAAf;AACD;;;;;;AAIH,SAASC,2BAAT,GAA8C;AAAA,oCAANC,IAAM;AAANA,QAAM;AAAA;;AAE5CR,sBAAoBA,wDAAyBC,gBAAzB,gBAA6CO,IAA7C,KAApB;;AAEA,SAAOR,iBAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBA,UAAUH,2BAA3B;AACAG,QAAQT,gBAAR,GAA2BA,gBAA3B","file":"GenericValidator.js","sourcesContent":["let protectedInstance;\n\n/**\n * Represents a generic validator\n */\nclass GenericValidator {\n\n  constructor({schemaValidator}) {\n\n    /** @static {Function} Validates data against a schema */\n    GenericValidator.schemaValidator = schemaValidator;\n  }\n\n  /**\n   * Validates data against a schema.\n   * @param {Object} payload The data to validate.\n   * @param {Object} schema The schema to validate against.\n   * @returns {boolean} The result of the schema validation if that's true.\n   */\n  schemaValidation(payload, schema) {\n\n    let validate = GenericValidator.schemaValidator(schema);\n\n    if (validate(payload)) {\n      return true;\n    }\n    throw validate.errors;\n  }\n\n}\n\nfunction getGenericValidatorInstance(...args) {\n\n  protectedInstance = protectedInstance || new GenericValidator(...args);\n\n  return protectedInstance;\n}\n\nmodule.exports = exports = getGenericValidatorInstance;\nexports.GenericValidator = GenericValidator;\n"]}