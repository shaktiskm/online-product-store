{"version":3,"sources":["../lib/api.es6"],"names":["express","require","bodyparser","methodOverride","checkEnvironmentVariables","ApiError","mwAllowCrossDomain","mwAuthenticateRequest","mwErrorHandler","mwAddRequestId","mwGenerateUserToken","productRouter","log","NODE_ENV","process","env","nodeEnv","config","Object","freeze","urlPrefix","app","environmentVariables","firstLevelAuthTest","environmentVariableChecker","isEnabled","set","http","port","secretKey","disable","use","json","get","req","res","send","post","notFoundHandler","next","apiError","listen","info","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AAAA,IACEC,aAAaD,QAAQ,aAAR,CADf;AAAA,IAEEE,iBAAiBF,QAAQ,iBAAR,CAFnB;AAAA,IAGEG,4BAA4BH,QAAQ,kCAAR,CAH9B;AAAA,IAIEI,WAAWJ,QAAQ,iBAAR,CAJb;AAAA,IAKEK,qBAAqBL,QAAQ,0CAAR,CALvB;AAAA,IAMEM,wBAAwBN,QAAQ,6CAAR,CAN1B;AAAA,IAOEO,iBAAiBP,QAAQ,sCAAR,CAPnB;AAAA,IAQEQ,iBAAiBR,QAAQ,sCAAR,CARnB;AAAA,IASES,sBAAsBT,QAAQ,2CAAR,CATxB;AAAA,IAUEU,gBAAgBV,QAAQ,qBAAR,CAVlB;AAAA,IAWEW,MAAMX,QAAQ,kBAAR,CAXR;;AAaI,IAACY,QAAD,GAAaC,QAAQC,GAArB,CAACF,QAAD;AAAA,IACFG,OADE,GACQH,YAAY,OADpB;AAAA,IAEFI,MAFE,GAEOC,OAAOC,MAAP,CAAclB,QAAQ,eAAee,OAAvB,CAAd,CAFP;AAAA,IAGFI,SAHE,GAGUH,OAAOG,SAHjB;AAAA,IAIFC,GAJE,GAIIrB,SAJJ;AAAA,IAKFsB,oBALE,GAKqBrB,QAAQ,gCAAR,CALrB;AAAA,IAMFsB,kBANE,GAMoBP,YAAY,OAAZ,IAAuBA,YAAY,MAApC,GACjBf,QAAQ,sDAAR,CADiB,GAEjB,IARF;;AAUJ;AACA;AACA,IAAIgB,OAAOO,0BAAP,CAAkCC,SAAtC,EAAiD;AAC/CrB,4BAA0BkB,oBAA1B;AACD;;AAED;AACAD,IAAIK,GAAJ,CAAQ,MAAR,EAAgBT,OAAOU,IAAP,CAAYC,IAA5B;AACAP,IAAIK,GAAJ,CAAQ,WAAR,EAAqBT,OAAOY,SAA5B;;AAEA;AACAR,IAAIS,OAAJ,CAAY,cAAZ;;AAEAT,IAAIU,GAAJ,CAAQzB,kBAAR;AACAe,IAAIU,GAAJ,CAAQ7B,WAAW8B,IAAX,EAAR;;AAEA;AACAX,IAAIY,GAAJ,CAAWb,SAAX,mBAAoC,UAACc,GAAD,EAAMC,GAAN,EAAc;AAChDA,MAAIC,IAAJ,CAAS,EAAC,OAAO,IAAR,EAAT;AACD,CAFD;;AAIA;AACAf,IAAIU,GAAJ,CAAQtB,cAAR;;AAEA;AACAY,IAAIgB,IAAJ,CAAS,gBAAT,EAA2B3B,mBAA3B;;AAEA;AACAW,IAAIU,GAAJ,CAAQxB,qBAAR;;AAEA;AACAc,IAAIU,GAAJ,CAAQ,WAAR,EAAqBpB,aAArB;;AAEA,IAAIK,YAAY,OAAZ,IAAuBA,YAAY,MAAvC,EAA+C;AAC7CK,MAAIU,GAAJ,CAAQX,YAAY,wBAApB,EAA8CG,kBAA9C;AACD;;AAED,SAASe,eAAT,CAAyBJ,GAAzB,EAA8BC,GAA9B,EAAmCI,IAAnC,EAAyC;AACvC,MAAIC,WAAW,IAAInC,QAAJ,CAAa,UAAb,EAAyB,wBAAzB,EAAmD,EAAnD,EAAuD,GAAvD,CAAf;;AAEA,SAAOkC,KAAKC,QAAL,CAAP;AACD;;AAEDnB,IAAIU,GAAJ,CAAQO,eAAR;;AAEAjB,IAAIU,GAAJ,CAAQ5B,cAAR;AACAkB,IAAIU,GAAJ,CAAQvB,cAAR;;AAEAa,IAAIoB,MAAJ,CAAWpB,IAAIY,GAAJ,CAAQ,MAAR,CAAX,EAA4B,YAAM;AAChCrB,MAAI8B,IAAJ,sCAA4CrB,IAAIY,GAAJ,CAAQ,MAAR,CAA5C;AACD,CAFD;;AAIAU,OAAOC,OAAP,GAAiBvB,GAAjB","file":"api.js","sourcesContent":["const express = require(\"express\"),\n  bodyparser = require(\"body-parser\"),\n  methodOverride = require(\"method-override\"),\n  checkEnvironmentVariables = require(\"./util/checkEnvironmentVariables\"),\n  ApiError = require(\"./util/apiError\"),\n  mwAllowCrossDomain = require(\"./middleware_services/mwAllowCrossDomain\"),\n  mwAuthenticateRequest = require(\"./middleware_services/mwAuthenticateRequest\"),\n  mwErrorHandler = require(\"./middleware_services/mwErrorHandler\"),\n  mwAddRequestId = require(\"./middleware_services/mwAddRequestId\"),\n  mwGenerateUserToken = require(\"./middleware_services/mwGenerateUserToken\"),\n  productRouter = require(\"./endpoints/product\"),\n  log = require(\"./util/ApiLogger\");\n\nlet {NODE_ENV} = process.env,\n  nodeEnv = NODE_ENV || \"local\",\n  config = Object.freeze(require(\"../config/\" + nodeEnv)),\n  urlPrefix = config.urlPrefix,\n  app = express(),\n  environmentVariables = require(\"../config/environmentVariables\"),\n  firstLevelAuthTest = (nodeEnv === \"local\" || nodeEnv === \"test\")\n    ? require(\"../test/dist/endpoints/helpers/firstLevelAuth/router\")\n    : null;\n\n// Checks the required enviro// Defines top middleware and routesnment variables\n// Logs the missing environment variables and exit the application\nif (config.environmentVariableChecker.isEnabled) {\n  checkEnvironmentVariables(environmentVariables);\n}\n\n// set the relevant config app wise\napp.set(\"port\", config.http.port);\napp.set(\"secretKey\", config.secretKey);\n\n// Don't generate X-Powered-By response header\napp.disable(\"x-powered-by\");\n\napp.use(mwAllowCrossDomain);\napp.use(bodyparser.json());\n\n// HealthCheck Endpoint --> GET ...v1/healthcheck\napp.get(`${urlPrefix}/healthcheck`, (req, res) => {\n  res.send({\"msg\": \"OK\"});\n});\n\n// App routes here\napp.use(mwAddRequestId);\n\n// JWT Authentication Implemented -- Generate Token\napp.post(\"/generateToken\", mwGenerateUserToken);\n\n// JWT Authentication Implemented -- Verify Token & User\napp.use(mwAuthenticateRequest);\n\n// Simple Product Add, Delete, Edit, Search Routes\napp.use(\"/products\", productRouter);\n\nif (nodeEnv === \"local\" || nodeEnv === \"test\") {\n  app.use(urlPrefix + \"/first-level-auth-test\", firstLevelAuthTest);\n}\n\nfunction notFoundHandler(req, res, next) {\n  let apiError = new ApiError(\"NotFound\", \"Resource doesn't exist\", \"\", 404);\n\n  return next(apiError);\n}\n\napp.use(notFoundHandler);\n\napp.use(methodOverride);\napp.use(mwErrorHandler);\n\napp.listen(app.get(\"port\"), () => {\n  log.info(`Server is listening on port --> ${app.get(\"port\")}`);\n});\n\nmodule.exports = app;\n"]}