{"version":3,"sources":["../../lib/middleware_services/mwGenerateUserToken.es6"],"names":["JWT","require","ApiError","log","mwGenerateUserToken","req","res","next","secret","app","get","jwtInstance","payload","body","payloadData","token","options","userId","error","id","sign","info","successResponse","status","send","err","module","exports"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,0BAAR,CAAZ;AAAA,IACEC,WAAWD,QAAQ,kBAAR,CADb;AAAA,IAEEE,MAAMF,QAAQ,mBAAR,CAFR;;AAIA,SAASG,mBAAT,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,IAAvC,EAA6C;AAC3C,MAAIC,SAASH,IAAII,GAAJ,CAAQC,GAAR,CAAY,WAAZ,CAAb;AAAA,MACEC,cAAc,IAAIX,GAAJ,CAAQQ,MAAR,CADhB;AAAA,MAEEI,UAAUP,IAAIQ,IAFhB;AAAA,MAGEC,oBAHF;AAAA,MAIEC,cAJF;AAAA,MAKEC,UAAU;AACR,iBAAa;AADL,GALZ;;AASA,MAAI,CAACJ,QAAQK,MAAb,EAAqB;AACnBd,QAAIe,KAAJ,CAAU,uDAAV;AACA,WAAOX,KAAK,IAAIL,QAAJ,CAAaG,IAAIc,EAAjB,EAAqB,GAArB,EAA0B,aAA1B,EAAyC,2CAAzC,EAAsF,EAAtF,CAAL,CAAP;AACD;;AAEDL,gBAAc;AACZ,cAAUF,QAAQK;AADN,GAAd;;AAIA,MAAI;AACFF,YAAQJ,YAAYS,IAAZ,CAAiBN,WAAjB,EAA8BE,OAA9B,CAAR;;AAEAb,QAAIkB,IAAJ,CAAS,sEAAT,EAAiFN,KAAjF;AACA,QAAIO,kBAAkB;AACpB,eAASjB,IAAIc,EADO;AAEpB,eAASJ,KAFW;AAGpB,gBAAU;AAHU,KAAtB;;AAMAT,QAAIiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,eAArB;AAED,GAZD,CAYE,OAAOG,GAAP,EAAY;AACZtB,QAAIe,KAAJ,CAAU,uDAAV,EAAmEO,GAAnE;AACA,WAAOlB,KAAK,IAAIL,QAAJ,CAAaG,IAAIc,EAAjB,EAAqB,GAArB,EAA0B,aAA1B,EAAyC,yBAAzC,EAAoE,EAApE,CAAL,CAAP;AACD;AACF;;AAEDO,OAAOC,OAAP,GAAiBvB,mBAAjB","file":"mwGenerateUserToken.js","sourcesContent":["const JWT = require(\"../util/JWTImplementaion\"),\n  ApiError = require(\"../util/apiError\"),\n  log = require(\"../util/ApiLogger\");\n\nfunction mwGenerateUserToken(req, res, next) {\n  let secret = req.app.get(\"secretKey\"),\n    jwtInstance = new JWT(secret),\n    payload = req.body,\n    payloadData,\n    token,\n    options = {\n      \"expiresIn\": \"10d\"\n    };\n\n  if (!payload.userId) {\n    log.error(\"mwAuthenticateRequest()//Unable to generate the token\");\n    return next(new ApiError(req.id, 400, \"Bad Request\", \"Token Generation Failed because of userId\", \"\"));\n  }\n\n  payloadData = {\n    \"userId\": payload.userId\n  };\n\n  try {\n    token = jwtInstance.sign(payloadData, options);\n\n    log.info(\"mwAuthenticateRequest()//Authentication Token generated successfully\", token);\n    let successResponse = {\n      \"reqId\": req.id,\n      \"token\": token,\n      \"status\": \"success\"\n    };\n\n    res.status(200).send(successResponse);\n\n  } catch (err) {\n    log.error(\"mwAuthenticateRequest()//Unable to generate the token\", err);\n    return next(new ApiError(req.id, 400, \"Bad Request\", \"Token Generation Failed\", \"\"));\n  }\n}\n\nmodule.exports = mwGenerateUserToken;\n"]}