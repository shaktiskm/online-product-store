{"version":3,"sources":["../../../lib/endpoints/product/ProductService.es6"],"names":["ApiError","require","documentSchema","protectedService","ProductService","dbService","genericValidator","uniqueIdService","_dbService","UniqueIdService","collection","req","res","next","query","read","then","console","log","successResponse","id","result","successHandler","Id","catch","err","errorHandler","payload","schema","schemaValidation","body","uniqueId","createUniqueId","document","validateProductSchema","Object","assign","insertOne","success","apiErr","productId","params","update","modifiedCount","remove","deletedCount","qty","data","reqId","keys","length","status","send","getServiceInstance","module","exports"],"mappings":"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","file":"ProductService.js","sourcesContent":["const ApiError = require(\"../../util/apiError\"),\n  documentSchema = require(\"../../schemas/document\");\n\nlet protectedService;\n\nclass ProductService {\n\n  constructor(dbService, genericValidator, uniqueIdService) {\n    this._dbService = dbService;\n    ProductService.UniqueIdService = uniqueIdService;\n    ProductService.genericValidator = genericValidator;\n    ProductService.collection = \"products\";\n  }\n\n  static successHandler(data, reqId, res, next) {\n    if (!data || Object.keys(data).length === 0) {\n      return next(new ApiError(reqId, 404, \"Not Found\", \"Resource does not exist\", \"\"));\n    }\n    res.status(200).send(data);\n  }\n\n  static errorHandler(err, reqId, next) {\n    let apiErr = new ApiError(reqId, 500, \"Error\", \"Internal Server Error\", err);\n\n    next(apiErr);\n  }\n\n  retrieveProducts(req, res, next) {\n    let collection = ProductService.collection,\n      query = {\n        \"body\": {}\n      };\n\n    this._dbService\n      .read({collection, query})\n      .then(result => {\n        console.log(\"retrieveProducts()//Successfully retrieved products\");\n        let successResponse = {\n          \"reqId\": req.id,\n          \"status\": \"success\",\n          \"data\": result\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"retrieveProducts()//Error in retrieving products\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n  validateProductSchema(payload, schema) {\n    return ProductService.genericValidator.schemaValidation(payload, schema);\n  }\n\n  createProduct(req, res, next) {\n    let collection = ProductService.collection,\n      payload = req.body,\n      uniqueId = ProductService.UniqueIdService.createUniqueId(),\n      document;\n\n    try {\n      if (this.validateProductSchema(payload, documentSchema)) {\n\n        document = Object.assign(payload, {\"_id\": uniqueId});\n        this._dbService\n          .insertOne({collection, document})\n          .then(success => {\n            console.log(\"createProduct()//Successfully created product with dbResult\", success.result);\n            let successResponse = {\n              \"reqId\": req.id,\n              \"id\": uniqueId,\n              \"status\": \"success\"\n            };\n\n            ProductService.successHandler(successResponse, req.Id, res, next);\n          })\n          .catch(err => {\n            console.log(\"createProduct()//Error in creating product\", err);\n            ProductService.errorHandler(err, req.id, next);\n          });\n      }\n    } catch (err) {\n      let apiErr = new ApiError(req.id, 400, \"ValidationError\", \"Bad Request\", err);\n\n      console.log(\"createProduct()//Error in validating schema ...\", err);\n      return next(apiErr);\n    }\n  }\n\n  retrieveProductById(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      query = {\n        \"body\": {\n          \"_id\": productId\n        }\n      };\n\n    this._dbService\n      .read({collection, query})\n      .then(result => {\n        console.log(`retrieveProductById()//Successfully retrieved product with id ${productId}`, result);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"status\": \"success\",\n          \"data\": result\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"retrieveProductById()//Error in retrieving product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n  updateProductById(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      payload = req.body,\n      query = {\n        \"_id\": productId\n      },\n      document = {\n        \"$set\": payload\n      };\n\n    try {\n      if (this.validateProductSchema(payload, documentSchema)) {\n        this._dbService\n          .update({collection, query, document})\n          .then(result => {\n            console.log(`updateProductById()//Successfully updated product with id ${productId} and dbResult modifiedCount`,\n              result.modifiedCount);\n            let successResponse = {\n              \"reqId\": req.id,\n              \"id\": productId,\n              \"status\": \"success\"\n            };\n\n            ProductService.successHandler(successResponse, req.Id, res, next);\n          })\n          .catch(err => {\n            console.log(\"updateProductById()//Error in updating product\", err);\n            ProductService.errorHandler(err, req.id, next);\n          });\n      }\n    } catch (err) {\n      let apiErr = new ApiError(req.id, 400, \"ValidationError\", \"Bad Request\", err);\n\n      console.log(\"updateProductById()//Error in validating schema ...\", err);\n      return next(apiErr);\n    }\n  }\n\n  deleteProductById(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      document = {\n        \"_id\": productId\n      };\n\n    this._dbService\n      .remove({collection, document})\n      .then(result => {\n        console.log(`deleteProductById()//Successfully removed product with id ${productId} and dbResult deletedCount`,\n          result.deletedCount);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": productId,\n          \"status\": \"success\"\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"deleteProductById()//Error in removing product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n\n  }\n\n  addOrRemoveProductQty(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      payload = req.body,\n      query = {\n        \"_id\": productId\n      },\n      document = {\n        \"$inc\": {\n          \"qty\": payload.qty\n        }\n      };\n\n    this._dbService\n      .update({collection, query, document})\n      .then(result => {\n        console.log(`addOrRemoveProductQty()//Successfully updated product quantity with id ${productId}`,\n          result.modifiedCount);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": productId,\n          \"status\": \"success\"\n        };\n\n        ProductService.successHandler(successResponse, req.Id, res, next);\n      })\n      .catch(err => {\n        console.log(\"addOrRemoveProductQty()//Error in updating product quantity\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n}\n\n\nfunction getServiceInstance(dbService, genericValidator, uniqueIdService) {\n  protectedService = protectedService || new ProductService(dbService, genericValidator, uniqueIdService);\n  return protectedService;\n}\n\nmodule.exports = getServiceInstance;\n"]}