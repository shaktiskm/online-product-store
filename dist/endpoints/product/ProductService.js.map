{"version":3,"sources":["../../../lib/endpoints/product/ProductService.es6"],"names":["ApiError","require","documentSchema","protectedService","ProductService","dbService","genericValidator","uniqueIdService","_dbService","UniqueIdService","collection","req","res","next","query","read","then","console","log","successResponse","id","result","successHandler","catch","err","errorHandler","payload","schema","schemaValidation","body","uniqueId","createUniqueId","document","validateProductSchema","Object","assign","insertOne","Error","apiErr","productId","params","update","remove","qty","data","keys","length","reqId","status","send","getServiceInstance","module","exports"],"mappings":"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","file":"ProductService.js","sourcesContent":["const ApiError = require(\"../../util/apiError\"),\n  documentSchema = require(\"../../schemas/document\");\n\nlet protectedService;\n\nclass ProductService {\n\n  constructor(dbService, genericValidator, uniqueIdService) {\n    this._dbService = dbService;\n    ProductService.UniqueIdService = uniqueIdService;\n    ProductService.genericValidator = genericValidator;\n    ProductService.collection = \"products\";\n  }\n\n  static successHandler(data, res, next) {\n    if (!data || Object.keys(data).length === 0) {\n      return next(new ApiError(data.reqId, 404, \"Not Found\", \"Resource does not exist\", \"\"));\n    }\n    res.status(200).send(data);\n  }\n\n  static errorHandler(err, reqId, next) {\n    let apiErr = new ApiError(reqId, 500, \"Error\", \"Internal Server Error\", err);\n\n    next(apiErr);\n  }\n\n  retrieveProducts(req, res, next) {\n    let collection = ProductService.collection,\n      query = {\n        \"body\": {}\n      };\n\n    this._dbService\n      .read({collection, query})\n      .then(result => {\n        console.log(\"retrieveProducts()//Successfully retrieved products\");\n        let successResponse = {\n          \"reqId\": req.id,\n          \"status\": \"success\",\n          \"data\": result\n        };\n\n        ProductService.successHandler(successResponse, res, next);\n      })\n      .catch(err => {\n        console.log(\"retrieveProducts()//Error in retrieving products\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n  validateProductSchema(payload, schema) {\n    return ProductService.genericValidator.schemaValidation(payload, schema);\n  }\n\n  createProduct(req, res, next) {\n    let collection = ProductService.collection,\n      payload = req.body,\n      uniqueId = ProductService.UniqueIdService.createUniqueId(),\n      document;\n\n    try {\n      if (this.validateProductSchema(payload, documentSchema)) {\n\n        document = Object.assign(payload, {\"_id\": uniqueId});\n        this._dbService\n          .insertOne({collection, document})\n          .then(result => {\n            let successResponse = {\n              \"reqId\": req.id,\n              \"id\": uniqueId,\n              \"status\": \"success\"\n            };\n\n            if (result && result === 1) {\n              console.log(\"createProduct()//Successfully created product in database\");\n              ProductService.successHandler(successResponse, res, next);\n            } else {\n              console.log(\"createProduct()//Error in creating product\");\n              ProductService.errorHandler(new Error(\"DBError\"), req.id, next);\n            }\n          })\n          .catch(err => {\n            console.log(\"createProduct()//Error in creating product\", err);\n            ProductService.errorHandler(err, req.id, next);\n          });\n      }\n    } catch (err) {\n      let apiErr = new ApiError(req.id, 400, \"ValidationError\", \"Bad Request\", err);\n\n      console.log(\"createProduct()//Error in validating schema ...\", err);\n      return next(apiErr);\n    }\n  }\n\n  retrieveProductById(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      query = {\n        \"body\": {\n          \"_id\": productId\n        }\n      };\n\n    this._dbService\n      .read({collection, query})\n      .then(result => {\n        console.log(`retrieveProductById()//Successfully retrieved product with id ${productId}`, result);\n        let successResponse = {\n          \"reqId\": req.id,\n          \"status\": \"success\",\n          \"data\": result\n        };\n\n        ProductService.successHandler(successResponse, res, next);\n      })\n      .catch(err => {\n        console.log(\"retrieveProductById()//Error in retrieving product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n  updateProductById(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      payload = req.body,\n      query = {\n        \"_id\": productId\n      },\n      document = {\n        \"$set\": payload\n      };\n\n    try {\n      if (this.validateProductSchema(payload, documentSchema)) {\n        this._dbService\n          .update({collection, query, document})\n          .then(result => {\n            let successResponse = {\n              \"reqId\": req.id,\n              \"id\": productId,\n              \"status\": \"success\"\n            };\n\n            if (!result || result === 0) {\n              let apiErr = new ApiError(req.id, 404, \"NotFound\", \"Resource doesn't exist\", \"\");\n\n              return next(apiErr);\n            }\n            console.log(`updateProductById()//Successfully updated product of id ${productId}`);\n\n            ProductService.successHandler(successResponse, res, next);\n          })\n          .catch(err => {\n            console.log(\"updateProductById()//Error in updating product\", err);\n            ProductService.errorHandler(err, req.id, next);\n          });\n      }\n    } catch (err) {\n      let apiErr = new ApiError(req.id, 400, \"ValidationError\", \"Bad Request\", err);\n\n      console.log(\"updateProductById()//Error in validating schema ...\", err);\n      return next(apiErr);\n    }\n  }\n\n  deleteProductById(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      document = {\n        \"_id\": productId\n      };\n\n    this._dbService\n      .remove({collection, document})\n      .then(result => {\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": productId,\n          \"status\": \"success\"\n        };\n\n        if (!result || result === 0) {\n          let apiErr = new ApiError(req.id, 404, \"NotFound\", \"Resource doesn't exist\", \"\");\n\n          return next(apiErr);\n        }\n        console.log(`deleteProductById()//Successfully removed product of id ${productId}`);\n\n        ProductService.successHandler(successResponse, res, next);\n      })\n      .catch(err => {\n        console.log(\"deleteProductById()//Error in removing product\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n\n  }\n\n  addOrRemoveProductQty(req, res, next) {\n    let collection = ProductService.collection,\n      productId = req.params.id,\n      payload = req.body,\n      query = {\n        \"_id\": productId\n      },\n      document = {\n        \"$inc\": {\n          \"qty\": payload.qty\n        }\n      };\n\n    this._dbService\n      .update({collection, query, document})\n      .then(result => {\n        let successResponse = {\n          \"reqId\": req.id,\n          \"id\": productId,\n          \"status\": \"success\"\n        };\n\n        if (!result || result === 0) {\n          let apiErr = new ApiError(req.id, 404, \"NotFound\", \"Resource doesn't exist\", \"\");\n\n          return next(apiErr);\n        }\n        console.log(`addOrRemoveProductQty()//Successfully updated product quantity of id ${productId}`);\n\n        ProductService.successHandler(successResponse, res, next);\n      })\n      .catch(err => {\n        console.log(\"addOrRemoveProductQty()//Error in updating product quantity\", err);\n        ProductService.errorHandler(err, req.id, next);\n      });\n  }\n\n}\n\n\nfunction getServiceInstance(dbService, genericValidator, uniqueIdService) {\n  protectedService = protectedService || new ProductService(dbService, genericValidator, uniqueIdService);\n  return protectedService;\n}\n\nmodule.exports = exports = getServiceInstance;\nexports.ProductService = ProductService;\n"]}