{"version":3,"sources":["../../lib/generic/GenericRepository.spec.es6"],"names":["require","expect","GenericRepository","describe","it","validConfig","genericRepo","to","have","property","done","inValidConfig","init","throw","Error"],"mappings":";;eAAiBA,QAAQ,MAAR,C;IAAVC,M,YAAAA,M;gBACiBD,QAAQ,yCAAR,C;IAArBE,iB,aAAAA,iB;;AAEHC,SAAS,uCAAT,EAAkD,YAAM;AACtDA,UAAS,oCAAT,EAA+C,YAAM;AACnDA,WAAS,2CAAT,EAAsD,YAAM;;AAE3DC,MAAG,6DAAH,EAAkE,gBAAQ;AACzE,QAAIC,cAAc;AAChB,gBAAW;AACV,0BAAoB,eADV;AAEV,0BAAoB,IAFV;AAGV,2BAAqB,EAHX;AAIV,wBAAkB;AAJR;AADK,KAAlB;AAAA,QAQCC,cAAc,IAAIJ,iBAAJ,CAAsBG,WAAtB,CARf;;AAUAJ,WAAOK,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,mBAArC;AACAR,WAAOK,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,oBAArC;AACAR,WAAOK,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,mBAArC;AACAR,WAAOK,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,qBAArC;AACAR,WAAOK,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,iBAArC;AACAR,WAAOK,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,eAArC;AACAC;AACA,IAlBD;AAmBA,GArBD;;AAuBDP,WAAS,6CAAT,EAAwD,YAAM;;AAE7DC,MAAG,8BAAH,EAAmC,gBAAQ;AAC1C,QAAIO,gBAAgB;AAClB,gBAAW;AADO,KAApB;;AAIA,aAASC,IAAT,GAAgB;AACf,YAAO,IAAIV,iBAAJ,CAAsBS,aAAtB,CAAP;AACA;;AAEDV,WAAOW,IAAP,EAAaL,EAAb,CAAgBM,KAAhB,CAAsBC,KAAtB,EAA6B,yCAA7B;AACAJ;AACA,IAXD;AAYA,GAdD;AAeA,EAvCD;AAwCD,CAzCD","file":"GenericRepository.js","sourcesContent":["const {expect} = require(\"chai\"),\n  {GenericRepository} = require(\"../../../dist/generic/GenericRepository\");\n\ndescribe(\"The generic repository unit tests -->\", () => {\n  describe(\"The generic repository constructor\", () => {\n    describe(\"when it's been executed with valid config\", () => {\n\n\t    it(\"should have initialized all instance properties succssfully\", done => {\n\t\t    let validConfig = {\n\t\t\t\t    \"mongoDb\": {\n\t\t\t\t\t    \"connectionString\": \"mongodb://foo\",\n\t\t\t\t\t    \"operationTimeout\": 1000,\n\t\t\t\t\t    \"connectionOptions\": {},\n\t\t\t\t\t    \"promiseTimeout\": 1000\n\t\t\t\t    }\n\t\t\t    },\n\t\t\t    genericRepo = new GenericRepository(validConfig);\n\n\t\t    expect(genericRepo).to.have.property(\"connectionString_\");\n\t\t    expect(genericRepo).to.have.property(\"connectionOptions_\");\n\t\t    expect(genericRepo).to.have.property(\"operationTimeout_\");\n\t\t    expect(genericRepo).to.have.property(\"commonWriteConcern_\");\n\t\t    expect(genericRepo).to.have.property(\"promiseTimeout_\");\n\t\t    expect(genericRepo).to.have.property(\"dbConnection_\");\n\t\t    done();\n\t    });\n    });\n\n\t  describe(\"when it's been executed with invalid config\", () => {\n\n\t\t  it(\"should throw an config error\", done => {\n\t\t\t  let inValidConfig = {\n\t\t\t\t\t  \"mongoDb\": {}\n\t\t\t\t  };\n\n\t\t\t  function init() {\n\t\t\t\t  return new GenericRepository(inValidConfig);\n\t\t\t  }\n\n\t\t\t  expect(init).to.throw(Error, \"MongoDB connection string not available\");\n\t\t\t  done();\n\t\t  });\n\t  });\n  });\n});\n"]}