{"version":3,"sources":["../../lib/generic/GenericValidator.spec.es6"],"names":["require","expect","stub","GenericValidator","setupValidator","returns","validate","errors","describe","it","Boolean","schemaValidator","to","be","true","a","expectedError","genericValidator","payload","jsonSchema","schemaValidation","withArgs","calledOnce","equal","wrapper","throw"],"mappings":";;eAAiBA,QAAQ,MAAR,C;IAAVC,M,YAAAA,M;gBACID,QAAQ,OAAR,C;IAARE,I,aAAAA,I;gBACoBF,QAAQ,wCAAR,C;IAApBG,gB,aAAAA,gB;;AAEH,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,WAAWJ,OAAOG,OAAP,CAAeA,OAAf,CAAf;;AAEAC,WAASC,MAAT,GAAkB,CAChB;AACE,aAAS,UADX;AAEE,eAAW;AAFb,GADgB,CAAlB;;AAOA,SAAOD,QAAP;AACD;;AAEDE,SAAS,oDAAT,EAA+D,YAAM;AACnEA,WAAS,qDAAT,EAAgE,YAAM;AACpEA,aAAS,2CAAT,EAAsD,YAAM;;AAE1DC,SAAG,0DAAH,EAA+D,YAAM;AACnER,eAAOS,QAAQP,iBAAiBQ,eAAzB,CAAP,EAAkDC,EAAlD,CAAqDC,EAArD,CAAwDC,IAAxD;AACAb,eAAOE,iBAAiBQ,eAAxB,EAAyCC,EAAzC,CAA4CC,EAA5C,CAA+CE,CAA/C,CAAiD,UAAjD;AACD,OAHD;AAID,KAND;AAOD,GARD;;AAUAP,WAAS,mFAAT,EAA8F,YAAM;AAClGA,aAAS,sCAAT,EAAiD,YAAM;AACrD,UAAIF,iBAAJ;AAAA,UACEU,sBADF;AAAA,UAEEC,yBAFF;AAAA,UAGEC,UAAU,EAAC,OAAO,MAAR,EAHZ;AAAA,UAIEC,aAAa;AACX,gBAAQ,QADG;AAEX,sBAAc;AACZ,iBAAO;AACL,oBAAQ;AADH;AADK;AAFH,OAJf;;AAaAV,SAAG,mDAAH,EAAwD,YAAM;AAC5DH,mBAAWF,eAAe,IAAf,CAAX;AACAa,2BAAmB,IAAId,gBAAJ,CAAqB;AACtC,6BAAmB;AAAA,mBAAMG,QAAN;AAAA;AADmB,SAArB,CAAnB;;AAIAW,yBAAiBG,gBAAjB,CAAkCF,OAAlC,EAA2CC,UAA3C;;AAEAlB,eAAOK,SAASe,QAAT,CAAkBH,OAAlB,EAA2BI,UAAlC,EAA8CV,EAA9C,CAAiDW,KAAjD,CAAuD,IAAvD;AACD,OATD;;AAWAd,SAAG,+BAAH,EAAoC,YAAM;AACxCH,mBAAWF,eAAe,KAAf,CAAX;AACAa,2BAAmB,IAAId,gBAAJ,CAAqB;AACtC,6BAAmB;AAAA,mBAAMG,QAAN;AAAA;AADmB,SAArB,CAAnB;AAGAU,wBAAgB,CACd;AACE,mBAAS,UADX;AAEE,qBAAW;AAFb,SADc,CAAhB;;AAOA,iBAASQ,OAAT,GAAmB;AACjBP,2BAAiBG,gBAAjB,CAAkCF,OAAlC,EAA2CC,UAA3C;AACD;;AAEDlB,eAAOuB,OAAP,EAAgBZ,EAAhB,CAAmBa,KAAnB,CAAyBT,aAAzB;AACD,OAjBD;AAmBD,KA5CD;AA6CD,GA9CD;AA+CD,CA1DD","file":"GenericValidator.js","sourcesContent":["const {expect} = require(\"chai\"),\n  {stub} = require(\"sinon\"),\n  {GenericValidator} = require(\"../../../dist/generic/GenericValidator\");\n\nfunction setupValidator(returns) {\n  let validate = stub().returns(returns);\n\n  validate.errors = [\n    {\n      \"field\": \"data.pay\",\n      \"message\": \"is the wrong type\"\n    }\n  ];\n\n  return validate;\n}\n\ndescribe(\"******** The generic validator unit tests ********\", () => {\n  describe(\"******** The generic validator constructor ********\", () => {\n    describe(\"******** when it's been executed ********\", () => {\n\n      it(\"should deploy a static member called \\\"schemaValidator\\\"\", () => {\n        expect(Boolean(GenericValidator.schemaValidator)).to.be.true;\n        expect(GenericValidator.schemaValidator).to.be.a(\"function\");\n      });\n    });\n  });\n\n  describe(\"******** when \\\"schemaValidation\\\" method of generic validator is called ********\", () => {\n    describe(\"******** when it's executed ********\", () => {\n      let validate,\n        expectedError,\n        genericValidator,\n        payload = {\"pay\": \"load\"},\n        jsonSchema = {\n          \"type\": \"object\",\n          \"properties\": {\n            \"pay\": {\n              \"type\": \"integer\"\n            }\n          }\n        };\n\n      it(\"should proxy to the json schema validator library\", () => {\n        validate = setupValidator(true);\n        genericValidator = new GenericValidator({\n          \"schemaValidator\": () => validate\n        });\n\n        genericValidator.schemaValidation(payload, jsonSchema);\n\n        expect(validate.withArgs(payload).calledOnce).to.equal(true);\n      });\n\n      it(\"should throw validation error\", () => {\n        validate = setupValidator(false);\n        genericValidator = new GenericValidator({\n          \"schemaValidator\": () => validate\n        });\n        expectedError = [\n          {\n            \"field\": \"data.pay\",\n            \"message\": \"is the wrong type\"\n          }\n        ];\n\n        function wrapper() {\n          genericValidator.schemaValidation(payload, jsonSchema);\n        }\n\n        expect(wrapper).to.throw(expectedError);\n      });\n\n    });\n  });\n});\n"]}