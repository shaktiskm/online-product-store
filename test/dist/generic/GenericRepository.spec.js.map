{"version":3,"sources":["../../lib/generic/GenericRepository.spec.es6"],"names":["require","expect","GenericRepository","describe","it","validConfig","logger","info","error","genericRepo","to","have","property","done","inValidConfig","init","throw","Error"],"mappings":";;eAAiBA,QAAQ,MAAR,C;IAAVC,M,YAAAA,M;gBACiBD,QAAQ,yCAAR,C;IAArBE,iB,aAAAA,iB;;AAEHC,SAAS,qDAAT,EAAgE,YAAM;AACpEA,WAAS,sDAAT,EAAiE,YAAM;AACrEA,aAAS,6DAAT,EAAwE,YAAM;;AAE5EC,SAAG,6DAAH,EAAkE,gBAAQ;AACxE,YAAIC,cAAc;AACd,qBAAW;AACT,gCAAoB,eADX;AAET,gCAAoB,IAFX;AAGT,iCAAqB,EAHZ;AAIT,8BAAkB;AAJT;AADG,SAAlB;AAAA,YAQEC,SAAS;AACPC,cADO,kBACA,CAAE,CADF;AAEPC,eAFO,mBAEC,CAAE;AAFH,SARX;AAAA,YAYEC,cAAc,IAAIP,iBAAJ,CAAsBG,WAAtB,EAAmCC,MAAnC,CAZhB;;AAcFL,eAAOQ,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,mBAArC;AACAX,eAAOQ,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,oBAArC;AACAX,eAAOQ,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,mBAArC;AACAX,eAAOQ,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,qBAArC;AACAX,eAAOQ,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,iBAArC;AACAX,eAAOQ,WAAP,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,QAA5B,CAAqC,eAArC;AACAC;AACA,OAtBA;AAuBD,KAzBD;;AA2BDV,aAAS,+DAAT,EAA0E,YAAM;;AAE/EC,SAAG,8BAAH,EAAmC,gBAAQ;AAC1C,YAAIU,gBAAgB;AAClB,qBAAW;AADO,SAApB;;AAIA,iBAASC,IAAT,GAAgB;AACf,iBAAO,IAAIb,iBAAJ,CAAsBY,aAAtB,CAAP;AACA;;AAEDb,eAAOc,IAAP,EAAaL,EAAb,CAAgBM,KAAhB,CAAsBC,KAAtB,EAA6B,yCAA7B;AACAJ;AACA,OAXD;AAYA,KAdD;AAeA,GA3CD;AA4CD,CA7CD","file":"GenericRepository.spec.js","sourcesContent":["const {expect} = require(\"chai\"),\n  {GenericRepository} = require(\"../../../dist/generic/GenericRepository\");\n\ndescribe(\"******** The generic repository unit tests ********\", () => {\n  describe(\"******** The generic repository constructor ********\", () => {\n    describe(\"******** when it's been executed with valid config ********\", () => {\n\n      it(\"should have initialized all instance properties succssfully\", done => {\n        let validConfig = {\n            \"mongoDb\": {\n              \"connectionString\": \"mongodb://foo\",\n              \"operationTimeout\": 1000,\n              \"connectionOptions\": {},\n              \"promiseTimeout\": 1000\n            }\n          },\n          logger = {\n            info() {},\n            error() {}\n          },\n          genericRepo = new GenericRepository(validConfig, logger);\n\n\t\t    expect(genericRepo).to.have.property(\"connectionString_\");\n\t\t    expect(genericRepo).to.have.property(\"connectionOptions_\");\n\t\t    expect(genericRepo).to.have.property(\"operationTimeout_\");\n\t\t    expect(genericRepo).to.have.property(\"commonWriteConcern_\");\n\t\t    expect(genericRepo).to.have.property(\"promiseTimeout_\");\n\t\t    expect(genericRepo).to.have.property(\"dbConnection_\");\n\t\t    done();\n\t    });\n    });\n\n\t  describe(\"******** when it's been executed with invalid config ********\", () => {\n\n\t\t  it(\"should throw an config error\", done => {\n\t\t\t  let inValidConfig = {\n\t\t\t\t\t  \"mongoDb\": {}\n\t\t\t\t  };\n\n\t\t\t  function init() {\n\t\t\t\t  return new GenericRepository(inValidConfig);\n\t\t\t  }\n\n\t\t\t  expect(init).to.throw(Error, \"MongoDB connection string not available\");\n\t\t\t  done();\n\t\t  });\n\t  });\n  });\n});\n"]}