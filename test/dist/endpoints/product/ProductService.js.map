{"version":3,"sources":["../../../lib/endpoints/product/ProductService.spec.es6"],"names":["require","expect","stub","spy","Q","ProductService","getGenericRepositoryMock","resolve","getGenericValidatorMock","returns","getUniqueIdServiceMock","uniqueIdMock","createUniqueId","getLoggerMock","info","error","debug","trace","warn","fatel","getService","dbService","genericValidator","uniqueIdService","logger","dbServiceMock","genericValidatorMock","uniqueIdServiceMock","loggerMock","MockedResponse","statusCode","status","code","send","MockedNext","errorObject","next","describe","it","Boolean","UniqueIdService","to","be","true","collection","errorHandler","a","successHandler","service","have","property","req","res","nextInstance","beforeEach","retrieveProducts","_dbService","read","calledOnce","createProduct","insertOne","retrieveProductById","updateProductById","update","deleteProductById","remove","addOrRemoveProductQty"],"mappings":"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","file":"ProductService.js","sourcesContent":["const {expect} = require(\"chai\"),\n  {stub, spy} = require(\"sinon\"),\n  Q = require(\"q\"),\n  {ProductService} = require(\"../../../../dist/endpoints/product/ProductService\");\n\nfunction getGenericRepositoryMock() {\n  return {\n    \"insertOne\": spy(() => Q.resolve(1)),\n    \"update\": spy(() => Q.resolve(1)),\n    \"remove\": spy(() => Q.resolve(1)),\n    \"read\": spy(() => Q.resolve(\"data\"))\n  };\n}\n\nfunction getGenericValidatorMock() {\n  return {\n    \"schemaValidation\": stub().returns(true)\n  };\n}\n\nfunction getUniqueIdServiceMock(uniqueIdMock) {\n  return {\n    createUniqueId() {\n      return uniqueIdMock || \"dc953b12-3c22-11e5-a151-feff819cdc9f\";\n    }\n  };\n}\n\nfunction getLoggerMock() {\n  return {\n    info() {},\n    error() {},\n    debug() {},\n    trace() {},\n    warn() {},\n    fatel() {}\n  };\n}\n\nfunction getService(dbService, genericValidator, uniqueIdService, logger) {\n  let dbServiceMock = dbService || getGenericRepositoryMock(),\n    genericValidatorMock = genericValidator || getGenericValidatorMock(),\n    uniqueIdServiceMock = uniqueIdService || getUniqueIdServiceMock(),\n    loggerMock = logger || getLoggerMock();\n\n  return new ProductService(dbServiceMock, genericValidatorMock, uniqueIdServiceMock, loggerMock);\n}\n\nfunction MockedResponse() {\n  this.statusCode = 0;\n  this.status = code => {\n    this.statusCode = code;\n    return {\n      send() {}\n    };\n  };\n}\n\nfunction MockedNext() {\n  this.errorObject = {};\n  this.next = error => {\n    this.errorObject = error;\n  };\n}\n\ndescribe(\"******** The product service unit tests ********\", () => {\n  describe(\"******** The product service constructor ********\", () => {\n    describe(\"******** when it's executed ********\", () => {\n      it(\"should initialize some static members\", () => {\n        expect(Boolean(ProductService.UniqueIdService)).to.be.true;\n        expect(Boolean(ProductService.genericValidator)).to.be.true;\n        expect(Boolean(ProductService.collection)).to.be.true;\n        expect(ProductService.errorHandler).to.be.a(\"function\");\n        expect(ProductService.successHandler).to.be.a(\"function\");\n      });\n\n      it(\"should initialize some instance members\", () => {\n        let service = getService();\n\n        expect(service).to.have.a.property(\"_dbService\");\n      });\n    });\n  });\n\n  describe(\"******** when \\\"retrieveProducts\\\" method of product service is called ********\", () => {\n    let service,\n      req,\n      res,\n      nextInstance;\n\n    beforeEach(() => {\n      service = getService();\n      req = {\"id\": \"1234\"};\n      res = new MockedResponse();\n      nextInstance = new MockedNext();\n    });\n\n    it(\"should execute read method of dbService\", () => {\n      service.retrieveProducts(req, res, nextInstance.next);\n      expect(service._dbService.read.calledOnce).to.be.true;\n    });\n  });\n\n  describe(\"******** when \\\"createProduct\\\" method of product service is called ********\", () => {\n    let service,\n      req,\n      res,\n      nextInstance;\n\n    beforeEach(() => {\n      service = getService();\n      stub(service, \"validateProductSchema\").returns(true);\n      req = {\n        \"id\": \"1234\",\n        \"body\": {}\n      };\n      res = new MockedResponse();\n      nextInstance = new MockedNext();\n    });\n\n    it(\"should execute insertOne method of dbService\", () => {\n      service.createProduct(req, res, nextInstance.next);\n      expect(service._dbService.insertOne.calledOnce).to.be.true;\n    });\n  });\n\n  describe(\"******** when \\\"retrieveProductById\\\" method of product service is called ********\", () => {\n    let service,\n      req,\n      res,\n      nextInstance;\n\n    beforeEach(() => {\n      service = getService();\n      req = {\n        \"id\": \"1234\",\n        \"params\": {\n          \"id\": \"3456\"\n        }\n      };\n      res = new MockedResponse();\n      nextInstance = new MockedNext();\n    });\n\n    it(\"should execute read method of dbService\", () => {\n      service.retrieveProductById(req, res, nextInstance.next);\n      expect(service._dbService.read.calledOnce).to.be.true;\n    });\n  });\n\n  describe(\"******** when \\\"updateProductById\\\" method of product service is called ********\", () => {\n    let service,\n      req,\n      res,\n      nextInstance;\n\n    beforeEach(() => {\n      service = getService();\n      stub(service, \"validateProductSchema\").returns(true);\n      req = {\n        \"id\": \"1234\",\n        \"body\": {},\n        \"params\": {\n          \"id\": \"3456\"\n        }\n      };\n      res = new MockedResponse();\n      nextInstance = new MockedNext();\n    });\n\n    it(\"should execute update method of dbService\", () => {\n      service.updateProductById(req, res, nextInstance.next);\n      expect(service._dbService.update.calledOnce).to.be.true;\n    });\n  });\n\n  describe(\"******** when \\\"deleteProductById\\\" method of product service is called ********\", () => {\n    let service,\n      req,\n      res,\n      nextInstance;\n\n    beforeEach(() => {\n      service = getService();\n      req = {\n        \"id\": \"1234\",\n        \"params\": {\n          \"id\": \"3456\"\n        }\n      };\n      res = new MockedResponse();\n      nextInstance = new MockedNext();\n    });\n\n    it(\"should execute remove method of dbService\", () => {\n      service.deleteProductById(req, res, nextInstance.next);\n      expect(service._dbService.remove.calledOnce).to.be.true;\n    });\n  });\n\n  describe(\"******** when \\\"addOrRemoveProductQty\\\" method of product service is called ********\", () => {\n    let service,\n      req,\n      res,\n      nextInstance;\n\n    beforeEach(() => {\n      service = getService();\n      req = {\n        \"id\": \"1234\",\n        \"body\": {},\n        \"params\": {\n          \"id\": \"3456\"\n        }\n      };\n      res = new MockedResponse();\n      nextInstance = new MockedNext();\n    });\n\n    it(\"should execute update method of dbService\", () => {\n      service.addOrRemoveProductQty(req, res, nextInstance.next);\n      expect(service._dbService.update.calledOnce).to.be.true;\n    });\n  });\n});\n"]}