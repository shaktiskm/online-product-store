{"version":3,"sources":["../../lib/first_level_auth/firstLevelAuth.spec.es6"],"names":["request","require","expect","urlProvider","url","describe","validToken","it","post","send","set","end","err","result","done","status","to","be","equal","body","an","put","get","del","ok","res","then","errorType","statusCode","messages","deep"],"mappings":"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","file":"firstLevelAuth.spec.js","sourcesContent":["let request = require(\"superagent\"),\n  expect = require(\"chai\").expect,\n  urlProvider = require(\"../util/urlProvider\"),\n  url = urlProvider(\"/first-level-auth-test\");\n\ndescribe(\"******** The first level authentication ********\", () => {\n\n  describe(\"******** when valid token is present in request ********\", () => {\n\n    let validToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJzaGFrdGlza21AZ21haWwuY29tIiwiaWF0IjoxNDk2Mjk1NjgzLCJleHAiOjE0OTcxNTk2ODN9.iVLYUxWgjhBbB8SWhMjL7qtUmQrqaGK_WjjU4Xcqonk\";\n\n    it(\"should pass a post request\", done => {\n\n      request\n        .post(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n\n    it(\"should pass a put request\", done => {\n\n      request\n        .put(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n\n    it(\"should pass a get request\", done => {\n\n      request\n        .get(url)\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n\n    it(\"should pass a del request\", done => {\n\n      request\n        .del(url)\n        .set(\"Authorization\", `Bearer ${validToken}`)\n        .end((err, result) => {\n          if (err) {\n            return done(err);\n          }\n          expect(result.status).to.be.equal(200);\n          expect(result.body).to.be.an(\"array\");\n          done();\n        });\n    });\n  });\n\n  describe(\"******** when token is missing in request ********\", () => {\n\n    it(\"should fail the post request with statusCode 401\", done => {\n      request\n        .post(url)\n        .send({\"foo\": \"bar\"})\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the put request with statusCode 401\", done => {\n      request\n        .put(url)\n        .send({\"foo\": \"bar\"})\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the get request with statusCode 401\", done => {\n      request\n        .get(url)\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the del request with statusCode 401\", done => {\n      request\n        .del(url)\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n  });\n\n  describe(\"******** when invalid token is present in request ********\", () => {\n\n    it(\"should fail the post request with statusCode 401\", done => {\n      request\n        .post(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", \"Bearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the put request with statusCode 401\", done => {\n      request\n        .put(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", \"Bearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the get request with statusCode 401\", done => {\n      request\n        .get(url)\n        .set(\"Authorization\", \"Bearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the del request with statusCode 401\", done => {\n      request\n        .del(url)\n        .set(\"Authorization\", \"Bearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n  });\n\n  describe(\"******** when invalid value of authorization header is present ********\", () => {\n\n    it(\"should fail the post request with statusCode 401\", done => {\n      request\n        .post(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", \"InvalidBearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the put request with statusCode 401\", done => {\n      request\n        .put(url)\n        .send({\"foo\": \"bar\"})\n        .set(\"Authorization\", \"InvalidBearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the get request with statusCode 401\", done => {\n      request\n        .get(url)\n        .set(\"Authorization\", \"InvalidBearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n\n    it(\"should fail the del request with statusCode 401\", done => {\n      request\n        .del(url)\n        .set(\"Authorization\", \"InvalidBearer invalidToken\")\n        .ok(res => res.status < 500)\n        .then(result => {\n          expect(result.body.errorType).to.be.equal(\"Unauthorized\");\n          expect(result.body.statusCode).to.be.equal(401);\n          expect(result.body.messages).to.deep.equal(\"Authentication credentials missing or incorrect\");\n          done();\n        });\n    });\n  });\n});\n"]}